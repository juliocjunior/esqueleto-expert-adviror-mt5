//+------------------------------------------------------------------+
//|                                                   Stochastic.mq5 |
//|                        Copyright 2009, MetaQuotes Software Corp. |
//|                                              http://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "2009, MetaQuotes Software Corp."
#property link      "http://www.mql5.com"
//--- indicator settings
#property indicator_separate_window
#property indicator_buffers 4
#property indicator_plots   1
#property indicator_type1   DRAW_LINE
#property indicator_color1  Black
//--- input parameters
input int InpFastPeriod=5;     // Periodo Media 1
input int InpMiddlePeriod=10;  // Periodo Media 2
input int InpSlowPeriod=20;    // Periodo Media 3
input int InpFastK=3;          // Peso Media 1
input int InpMiddleK=2;        // Peso Media 2
input int InpSlowK=1;          // Peso Media 3
input int InpSlowing=1;        // Media
//--- indicator buffers
double    ExtMainBuffer[];
double    ExtHighesBuffer[];
double    ExtLowesBuffer[];
//+------------------------------------------------------------------+
//| Custom indicator initialization function                         |
//+------------------------------------------------------------------+
void OnInit()
  {
//--- set accuracy
   IndicatorSetInteger(INDICATOR_DIGITS,2);
//--- set maximum and minimum for subwindow
   IndicatorSetDouble(INDICATOR_MINIMUM,0);
   IndicatorSetDouble(INDICATOR_MAXIMUM,100);
//--- name for DataWindow and indicator subwindow label
   PlotIndexSetString(0,PLOT_LABEL,"Main");
//--- sets first bar from what index will be drawn
   PlotIndexSetInteger(0,PLOT_DRAW_BEGIN,InpFastPeriod+InpMiddlePeriod+InpSlowPeriod+InpSlowing-2);
   PlotIndexSetInteger(1,PLOT_DRAW_BEGIN,InpFastPeriod+InpMiddlePeriod+InpSlowPeriod+InpSlowing-2);
//--- initialization done
  }
//+------------------------------------------------------------------+
//| Stochastic Oscillator                                            |
//+------------------------------------------------------------------+
int OnCalculate(const int rates_total, const int prev_calculated,
                const datetime &Time[],
                const double &Open[], const double &High[],
                const double &Low[], const double &Close[],
                const long &TickVolume[], const long &Volume[],
                const int &Spread[]) {
    int i, start;
    double FastK, MiddleK, SlowK;

    if (rates_total <= InpSlowPeriod)
        return 0;

    start = InpSlowPeriod;

    for (i = start; i < rates_total && !IsStopped(); i++) {
        double dminFast = 1000000.0, dmaxFast = -1000000.0;
        double dminMiddle = 1000000.0, dmaxMiddle = -1000000.0;
        double dminSlow = 1000000.0, dmaxSlow = -1000000.0;

        for (int k = i - InpFastPeriod + 1; k <= i; k++) {
            if (dminFast > Low[k]) dminFast = Low[k];
            if (dmaxFast < High[k]) dmaxFast = High[k];
        }

        for (int k = i - InpMiddlePeriod + 1; k <= i; k++) {
            if (dminMiddle > Low[k]) dminMiddle = Low[k];
            if (dmaxMiddle < High[k]) dmaxMiddle = High[k];
        }

        for (int k = i - InpSlowPeriod + 1; k <= i; k++) {
            if (dminSlow > Low[k]) dminSlow = Low[k];
            if (dmaxSlow < High[k]) dmaxSlow = High[k];
        }

        FastK = (Close[i] - dminFast) / (dmaxFast - dminFast) * 100;
        MiddleK = (Close[i] - dminMiddle) / (dmaxMiddle - dminMiddle) * 100;
        SlowK = (Close[i] - dminSlow) / (dmaxSlow - dminSlow) * 100;

        ExtMainBuffer[i] = (InpFastK * FastK + InpMiddleK * MiddleK + InpSlowK * SlowK) /
                           (InpFastK + InpMiddleK + InpSlowK);
    }

    return rates_total;
}
