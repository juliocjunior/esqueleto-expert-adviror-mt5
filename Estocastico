//+------------------------------------------------------------------+
//|                                                      ProjectName |
//|                                      Copyright 2020, CompanyName |
//|                                       http://www.companyname.net |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>
#include <CTradeStatistics.mqh>
CTrade trade;
CTradeStatistics m_stat;

// INPUTS
//-------
input group "Inverter"
input bool Inverter_Filtro_EstocasticoFiltro1 = false;
input bool Inverter_Filtro_ADX = false;
input bool Inverter_Estrategia = false;

input group ""
input int Candles_Por_Operacao = 1;

input group "Filtro Estocastico"
input int Espacamento_EstocasticoFiltro1 = 10;
input int Periodo_EstocasticoFiltro1 = 14;
input int Media_EstocasticoFiltro1 = 14;

input group "Filtro ADX"
input int Linha_ADX = 25;
input int Periodo_ADX = 15;

input group ""
input int periodoEstocastico1 =14;
input int MediaEstocastico1 =3;
input int espacamento =30;

input group ""
input int Magic = 1;

// VARIÁVEIS
int hAbertura = 3;
int mAbertura = 0;
int hFechamento = 22;
int mFechamento = 0;
int Coldown = 0;
double Lotes = 1;
 
int Linha_De_Compra_EstocasticoFiltro1 = Espacamento_EstocasticoFiltro1;
int Linha_De_Venda_EstocasticoFiltro1 = 100+Espacamento_EstocasticoFiltro1*(-1);
int Acima_Da_Linha_Compra_EstocasticoFiltro1 = 0;
int Abaixo_Da_Linha_Venda_EstocasticoFiltro1 = 0;

int Acima_Da_Linha_ADX = 25;
datetime lastTime = iTime(NULL, 0, 0);

bool Setup_De_Compra = false;
bool Setup_De_Venda = false;
int Pause = 0;
int Posicoes_Abertas = 0;
int Tempo_Posicao_Aberta = 0;

int linha_de_compra = 50-espacamento;
int linha_de_venda = 50+espacamento;

// HANDLES
//--------
double Handle_EstocasticoFiltro1;
double Handle_ADX;
double Handle_Estocastico1;

// BUFFERS
//--------
double EstocasticoFiltro1[];
double ADX[];
double Estocastico1[];



MqlRates rates[];

// ANTISPAM
//---------
datetime candleNovo;
datetime candleAtual;

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit() {
   trade.SetExpertMagicNumber(Magic);
   // HANDLES
   //--------
   Handle_EstocasticoFiltro1 = iStochastic(NULL, PERIOD_CURRENT, Periodo_EstocasticoFiltro1, 1, Media_EstocasticoFiltro1, MODE_SMA, STO_CLOSECLOSE);
   Handle_ADX = iADX(NULL, PERIOD_CURRENT, Periodo_ADX);
   Handle_Estocastico1 = iStochastic(NULL, PERIOD_CURRENT,periodoEstocastico1, 1, MediaEstocastico1,MODE_SMA,STO_LOWHIGH);
   return (INIT_SUCCEEDED);
}



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick() {
   // ARRAY
   //------
   ArraySetAsSeries(EstocasticoFiltro1, true);
   ArraySetAsSeries(ADX, true);
   ArraySetAsSeries(rates, true);
   ArraySetAsSeries(Estocastico1, true);
   
   // COPYBUFFER
   //----------
   CopyBuffer(Handle_EstocasticoFiltro1, 0, 1, 3, EstocasticoFiltro1);
   CopyBuffer(Handle_ADX, 0, 1, 3, ADX);
   CopyRates(_Symbol, _Period, 0, 4, rates);
   CopyBuffer(Handle_Estocastico1, 0, 1, 3, Estocastico1);

// VERIFICA SE ESTÁ COM UMA OPERAÇÃO ABERTA
//--------------------
   if (GetTicketByMagicNumber(Magic) != -1) {
      Posicoes_Abertas = 1;
   } else {
      Posicoes_Abertas = 0;
   }

///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///  V E R I F I C A Ç Ã O   N A   A B E R T U R A   D O S   C A N D L E S  /// --------------------------------------------------------------------------------------------
///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   if(iTime(NULL, 0, 0) != lastTime) {
      // O tempo do último candle mudou, então um novo candle começou
      if(Pause > 0) {
         Pause = Pause - 1;
      }
      
      if (Posicoes_Abertas !=0) {
        Tempo_Posicao_Aberta = Tempo_Posicao_Aberta+1;
      }
      // Atualiza o tempo do último candle
      lastTime = iTime(NULL, 0, 0);
      

      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      ///  V E R I F I C A Ç Ã O   D O S   F I L T R O S  /// --------------------------------------------------------------------------------------------------------------------
      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      if(EstocasticoFiltro1[1] > Linha_De_Compra_EstocasticoFiltro1) {
         if(Inverter_Filtro_EstocasticoFiltro1 == false) {
            Acima_Da_Linha_Compra_EstocasticoFiltro1 = 1;
         } else {
            Acima_Da_Linha_Compra_EstocasticoFiltro1 = 0;
         }
      } else {
         if(Inverter_Filtro_EstocasticoFiltro1 == false) {
            Acima_Da_Linha_Compra_EstocasticoFiltro1 = 0;
         } else {
            Acima_Da_Linha_Compra_EstocasticoFiltro1 = 1;
         }
      }
      
      if(EstocasticoFiltro1[1] < Linha_De_Venda_EstocasticoFiltro1) {
         if(Inverter_Filtro_EstocasticoFiltro1 == false) {
            Abaixo_Da_Linha_Venda_EstocasticoFiltro1 = 1;
         } else {
            Abaixo_Da_Linha_Venda_EstocasticoFiltro1 = 0;
         }
      } else {
         if(Inverter_Filtro_EstocasticoFiltro1 == false) {
            Abaixo_Da_Linha_Venda_EstocasticoFiltro1 = 0;
         } else {
            Abaixo_Da_Linha_Venda_EstocasticoFiltro1 = 1;
         }
      }
      
      
      if(ADX[1] > Linha_ADX) {
         if(Inverter_Filtro_ADX == false) {
            Acima_Da_Linha_ADX = 1;
         } else {
            Acima_Da_Linha_ADX = 0;
         }
      } else {
         if(Inverter_Filtro_ADX == false) {
            Acima_Da_Linha_ADX = 0;
         } else {
            Acima_Da_Linha_ADX = 1;
         }
      }
      
      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      ///  V E R I F I C A Ç Ã O   D O   S E T U P  /// --------------------------------------------------------------------------------------------------------------------
      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
      if(Estocastico1[1] < linha_de_compra && Estocastico1[0] > linha_de_compra) {
         Setup_De_Compra = true;
      } else {
         Setup_De_Compra = false;
      }
      
      if(Estocastico1[1] > linha_de_venda && Estocastico1[0] < linha_de_venda) {
         Setup_De_Venda = true;
      } else {
         Setup_De_Venda = false;;
      }
      
      Print("posições abertas: ",Posicoes_Abertas);
      Print("tempo de posição aberta: ",Tempo_Posicao_Aberta);
      Print("Acima_Da_Linha_Compra_EstocasticoFiltro1: ",Acima_Da_Linha_Compra_EstocasticoFiltro1);
      Print("Abaixo_Da_Linha_Venda_EstocasticoFiltro1: ",Abaixo_Da_Linha_Venda_EstocasticoFiltro1);
   }

   // HORÁRIO OPERACIONAL
   //--------------------
   MqlDateTime dataInterna;
   TimeCurrent(dataInterna);
   double loc_horarioAtual = dataInterna.hour * 60 + dataInterna.min;
   double loc_horarioAbertura = hAbertura * 60 + mAbertura;
   double loc_horarioFechamento = hFechamento * 60 + mFechamento - 1;
   if (loc_horarioAtual > loc_horarioFechamento) {
      encerrarPosicoes();
      cancelarOrdens();
   }
   if (loc_horarioAtual < loc_horarioAbertura) {
      return;
   }
   if (loc_horarioAtual > loc_horarioFechamento) {
      return;
   }
   // ANTISPAM
   //---------
   MqlTick price_info;
   ZeroMemory(price_info);
   SymbolInfoTick(_Symbol, price_info);
   
   if(Posicoes_Abertas ==0 && Pause ==0 && Acima_Da_Linha_ADX ==1) {
      if(Setup_De_Compra ==1 && Acima_Da_Linha_Compra_EstocasticoFiltro1 ==1) {
         if(Inverter_Estrategia == false) {
            trade.Buy(Lotes);
         } else {
            trade.Sell(Lotes);
         }
      }
         
      if(Setup_De_Venda ==1 && Abaixo_Da_Linha_Venda_EstocasticoFiltro1 ==1) {
         if(Inverter_Estrategia == false) {
            trade.Sell(Lotes);
         } else {
            trade.Buy(Lotes);
         }
      } 
   }

   ///----------------------------------------------------------------------------------------------------------------------------------------------------------------------
   ///  L O G I C A   O P E R A C I O N A L  -  S A Í D A  /// -------------------------------------------------------------------------------------------------------------
   ///----------------------------------------------------------------------------------------------------------------------------------------------------------------------
   if(Tempo_Posicao_Aberta == Candles_Por_Operacao) {
      trade.PositionClose(GetTicketByMagicNumber(Magic));
      Tempo_Posicao_Aberta = 0;
      Pause = 1 + Coldown;
   }
}

// ENCERRAR POSIÇÕES
void encerrarPosicoes() {
   for (int i = 0; i < PositionsTotal(); i++) {
      trade.PositionClose(PositionGetSymbol(i));
   }
}

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void cancelarOrdens() {
   for (int i = 0; i < OrdersTotal(); i++) {
      ulong orderticket = OrderGetTicket(i);
      trade.OrderDelete(orderticket);
   }
}

long GetTicketByMagicNumber(int magicNumber)
{
    // Contar o número de posições abertas
    int totalPositions = PositionsTotal();
    
    // Percorrer todas as posições abertas
    for (int i = 0; i < totalPositions; i++)
    {
        // Obter o identificador (ticket) da posição
        ulong ticket = PositionGetTicket(i);
        
        // Verificar se conseguimos obter os detalhes da posição
        if (PositionSelectByTicket(ticket))
        {
            // Obter o magic number da posição
            int positionMagicNumber = PositionGetInteger(POSITION_MAGIC);
            
            // Comparar com o magic number especificado
            if (positionMagicNumber == magicNumber)
            {
                // Retornar o ticket se o magic number corresponder
                return ticket;
            }
        }
    }
    
    // Se não encontrar, retornar -1
    return -1;
}

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double OnTester() {
   int handle = iCustom(_Symbol, PERIOD_CURRENT, "TradeBuddyTesterMT5");
   ChartIndicatorAdd(0,0,handle);

// Verifica se o cálculo das estatísticas foi realizado com sucesso
   if(!m_stat.Calculate()) {
      return 0;
   }
// Verifica o número de trades
   if(TesterStatistics(STAT_TRADES) <= 500) {
      return 0;
   }
   double resultado = MathPow(m_stat.LRCorrelation(), 10)*m_stat.ProfitFactor();
   if(m_stat.Profit() > 0) {
      if(resultado > 0) {
         return resultado;
      } else {
         return resultado * -1;
      }
   } else {
      if(resultado < 0) {
         return resultado;
      } else {
         return resultado * -1;
      }
   }
}
