//+------------------------------------------------------------------+
//|                                                      ProjectName |
//|                                      Copyright 2020, CompanyName |
//|                                       http://www.companyname.net |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>
#include <CTradeStatistics.mqh>
CTrade trade;
CTradeStatistics m_stat;

enum OptionsEnum {
// Incremento de 1 de 1 a 30
  Option1 = 1,   // 1
  Option2 = 2,   // 2
  Option3 = 3,   // 3
  Option4 = 4,   // 4
  Option5 = 5,   // 5
  Option6 = 6,   // 6
  Option7 = 7,   // 7
  Option8 = 8,   // 8
  Option9 = 9,   // 9
  Option10 = 10, // 10
  Option11 = 11, // 11
  Option12 = 12, // 12
  Option13 = 13, // 13
  Option14 = 14, // 14
  Option15 = 15, // 15
  Option16 = 16, // 16
  Option17 = 17, // 17
  Option18 = 18, // 18
  Option19 = 19, // 19
  Option20 = 20, // 20
  Option21 = 21, // 21
  Option22 = 22, // 22
  Option23 = 23, // 23
  Option24 = 24, // 24
  Option25 = 25, // 25
  Option26 = 26, // 26
  Option27 = 27, // 27
  Option28 = 28, // 28
  Option29 = 29, // 29
  Option30 = 30, // 30

// Incremento de 2 de 30 a 100
  Option31 = 32,  // 32
  Option32 = 34,  // 34
  Option33 = 36,  // 36
  Option34 = 38,  // 38
  Option35 = 40,  // 40
  Option36 = 42,  // 42
  Option37 = 44,  // 44
  Option38 = 46,  // 46
  Option39 = 48,  // 48
  Option40 = 50,  // 50
  Option41 = 52,  // 52
  Option42 = 54,  // 54
  Option43 = 56,  // 56
  Option44 = 58,  // 58
  Option45 = 60,  // 60
  Option46 = 62,  // 62
  Option47 = 64,  // 64
  Option48 = 66,  // 66
  Option49 = 68,  // 68
  Option50 = 70,  // 70
  Option51 = 72,  // 72
  Option52 = 74,  // 74
  Option53 = 76,  // 76
  Option54 = 78,  // 78
  Option55 = 80,  // 80
  Option56 = 82,  // 82
  Option57 = 84,  // 84
  Option58 = 86,  // 86
  Option59 = 88,  // 88
  Option60 = 90,  // 90
  Option61 = 92,  // 92
  Option62 = 94,  // 94
  Option63 = 96,  // 96
  Option64 = 98,  // 98
  Option65 = 100, // 100

// Incremento de 10 de 100 a 300
  Option66 = 110, // 110
  Option67 = 120, // 120
  Option68 = 130, // 130
  Option69 = 140, // 140
  Option70 = 150, // 150
  Option71 = 160, // 160
  Option72 = 170, // 170
  Option73 = 180, // 180
  Option74 = 190, // 190
  Option75 = 200, // 200
  Option76 = 210, // 210
  Option77 = 220, // 220
  Option78 = 230, // 230
  Option79 = 240, // 240
  Option80 = 250, // 250
  Option81 = 260, // 260
  Option82 = 270, // 270
  Option83 = 280, // 280
  Option84 = 290, // 290
  Option85 = 300, // 300

// Incremento de 20 de 300 a 1000
  Option86 = 320,  // 320
  Option87 = 340,  // 340
  Option88 = 360,  // 360
  Option89 = 380,  // 380
  Option90 = 400,  // 400
  Option91 = 420,  // 420
  Option92 = 440,  // 440
  Option93 = 460,  // 460
  Option94 = 480,  // 480
  Option95 = 500,  // 500
  Option96 = 520,  // 520
  Option97 = 540,  // 540
  Option98 = 560,  // 560
  Option99 = 580,  // 580
  Option100 = 600, // 600
  Option101 = 620, // 620
  Option102 = 640, // 640
  Option103 = 660, // 660
  Option104 = 680, // 680
  Option105 = 700, // 700
  Option106 = 720, // 720
  Option107 = 740, // 740
  Option108 = 760, // 760
  Option109 = 780, // 780
  Option110 = 800, // 800
  Option111 = 820, // 820
  Option112 = 840, // 840
  Option113 = 860, // 860
  Option114 = 880, // 880
  Option115 = 900, // 900
  Option116 = 920, // 920
  Option117 = 940, // 940
  Option118 = 960, // 960
  Option119 = 980, // 980
  Option120 = 1000 // 1000
};

// INPUTS
//-------

input group "Inverter"
input bool Inverter_Filtro_Estocastico1 = false;
input bool Inverter_Filtro_ADX = false;
input bool Inverter_Estrategia = false;

input group ""
input int Candles_Por_Operacao = 1;

input group "Filtro Estocastico"
input int Espacamento_Estocastico1 = 10;
input OptionsEnum Periodo_Estocastico1 = Option1;
input OptionsEnum Media_Estocastico1 = Option1;

input group "Filtro ADX"
input int Linha_ADX = 25;
input OptionsEnum Periodo_ADX = Option1;

input group "AMA1"
input OptionsEnum periodo_AMA1 = Option1;
input OptionsEnum fast_periodo_AMA1 = Option1;
input OptionsEnum slow_periodo_AMA1 = Option1;

input group "AMA2"
input OptionsEnum periodo_AMA2 = Option1;
input OptionsEnum fast_periodo_AMA2 = Option1;
input OptionsEnum slow_periodo_AMA2 = Option1;

input group ""
input int mintrades = 500;
input int Magic = 1;

// VARIÁVEIS
int hAbertura = 3;
int mAbertura = 0;
int hFechamento = 22;
int mFechamento = 0;
int Coldown = 0;
double Lotes = 1;
 
int Linha_De_Compra_Estocastico1 = Espacamento_Estocastico1;
int Linha_De_Venda_Estocastico1 = 100-Espacamento_Estocastico1;
int Acima_Da_Linha_Compra_Estocastico1 = 0;
int Abaixo_Da_Linha_Venda_Estocastico1 = 0;

int Acima_Da_Linha_ADX = 25;
datetime lastTime = iTime(NULL, 0, 0);

bool Setup_De_Compra = false;
bool Setup_De_Venda = false;
int Pause = 0;
int Posicoes_Abertas = 0;
int Tempo_Posicao_Aberta = 0;

// HANDLES
//--------
double Handle_Estocastico1;
double Handle_ADX;
double Handle_AMA1;
double Handle_AMA2;

// BUFFERS
//--------
double Estocastico1[];
double ADX[];
double AMA1[];
double AMA2[];

MqlRates rates[];

// ANTISPAM
//---------
datetime candleNovo;
datetime candleAtual;

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit() {
   trade.SetExpertMagicNumber(Magic);
   // HANDLES
   //--------
   Handle_Estocastico1 = iStochastic(NULL, PERIOD_CURRENT, Periodo_Estocastico1, 1, Media_Estocastico1, MODE_SMA, STO_CLOSECLOSE);
   Handle_ADX = iADX(NULL, PERIOD_CURRENT, Periodo_ADX);
   Handle_AMA1 = iAMA(NULL, PERIOD_CURRENT, periodo_AMA1, fast_periodo_AMA1, slow_periodo_AMA1, 0, PRICE_CLOSE);
   Handle_AMA2 = iAMA(NULL, PERIOD_CURRENT, periodo_AMA2, fast_periodo_AMA2, slow_periodo_AMA2, 0, PRICE_CLOSE);
   return (INIT_SUCCEEDED);
}



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick() {
   // ARRAY
   //------
   ArraySetAsSeries(Estocastico1, true);
   ArraySetAsSeries(ADX, true);
   ArraySetAsSeries(AMA1, true);
   ArraySetAsSeries(AMA2, true);
   ArraySetAsSeries(rates, true);
   // COPYBUFFER
   //----------
   CopyBuffer(Handle_Estocastico1, 0, 1, 3, Estocastico1);
   CopyBuffer(Handle_ADX, 0, 1, 3, ADX);
   CopyBuffer(Handle_AMA1, 0, 1, 3, AMA1);
   CopyBuffer(Handle_AMA2, 0, 1, 3, AMA2);
   CopyRates(_Symbol, _Period, 0, 4, rates);

// VERIFICA SE ESTÁ COM UMA OPERAÇÃO ABERTA
//--------------------
   if (GetTicketByMagicNumber(Magic) != -1) {
      Posicoes_Abertas = 1;
   } else {
      Posicoes_Abertas = 0;
   }

///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///  V E R I F I C A Ç Ã O   N A   A B E R T U R A   D O S   C A N D L E S  /// --------------------------------------------------------------------------------------------
///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   if(iTime(NULL, 0, 0) != lastTime) {
      // O tempo do último candle mudou, então um novo candle começou
      if(Pause > 0) {
         Pause = Pause - 1;
      }
      
      if (Posicoes_Abertas !=0) {
        Tempo_Posicao_Aberta = Tempo_Posicao_Aberta+1;
      }
      // Atualiza o tempo do último candle
      lastTime = iTime(NULL, 0, 0);
      

      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      ///  V E R I F I C A Ç Ã O   D O S   F I L T R O S  /// --------------------------------------------------------------------------------------------------------------------
      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      if(Estocastico1[1] > Linha_De_Compra_Estocastico1) {
         if(Inverter_Filtro_Estocastico1 == false) {
            Acima_Da_Linha_Compra_Estocastico1 = 1;
         } else {
            Acima_Da_Linha_Compra_Estocastico1 = 0;
         }
      } else {
         if(Inverter_Filtro_Estocastico1 == false) {
            Acima_Da_Linha_Compra_Estocastico1 = 0;
         } else {
            Acima_Da_Linha_Compra_Estocastico1 = 1;
         }
      }
      
      if(Estocastico1[1] < Linha_De_Venda_Estocastico1) {
         if(Inverter_Filtro_Estocastico1 == false) {
            Abaixo_Da_Linha_Venda_Estocastico1 = 1;
         } else {
            Abaixo_Da_Linha_Venda_Estocastico1 = 0;
         }
      } else {
         if(Inverter_Filtro_Estocastico1 == false) {
            Abaixo_Da_Linha_Venda_Estocastico1 = 0;
         } else {
            Abaixo_Da_Linha_Venda_Estocastico1 = 1;
         }
      }
      
      
      if(ADX[1] > Linha_ADX) {
         if(Inverter_Filtro_ADX == false) {
            Acima_Da_Linha_ADX = 1;
         } else {
            Acima_Da_Linha_ADX = 0;
         }
      } else {
         if(Inverter_Filtro_ADX == false) {
            Acima_Da_Linha_ADX = 0;
         } else {
            Acima_Da_Linha_ADX = 1;
         }
      }
      
      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      ///  V E R I F I C A Ç Ã O   D O   S E T U P  /// --------------------------------------------------------------------------------------------------------------------
      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
      if(AMA1[0] > AMA2[0] && AMA1[1] < AMA2[1]) {
         Setup_De_Compra = true;
      } else {
         Setup_De_Compra = false;
      }
      
      if(AMA1[0] < AMA2[0] && AMA1[1] > AMA2[1]) {
         Setup_De_Venda = true;
      } else {
         Setup_De_Venda = false;;
      }
      
      Print("posições abertas: ",Posicoes_Abertas);
      Print("tempo de posição aberta: ",Tempo_Posicao_Aberta);
      Print("Acima_Da_Linha_Compra_Estocastico1: ",Acima_Da_Linha_Compra_Estocastico1);
      Print("Abaixo_Da_Linha_Venda_Estocastico1: ",Abaixo_Da_Linha_Venda_Estocastico1);
   }

   // HORÁRIO OPERACIONAL
   //--------------------
   MqlDateTime dataInterna;
   TimeCurrent(dataInterna);
   double loc_horarioAtual = dataInterna.hour * 60 + dataInterna.min;
   double loc_horarioAbertura = hAbertura * 60 + mAbertura;
   double loc_horarioFechamento = hFechamento * 60 + mFechamento - 1;
   if (loc_horarioAtual > loc_horarioFechamento) {
      encerrarPosicoes();
      cancelarOrdens();
   }
   if (loc_horarioAtual < loc_horarioAbertura) {
      return;
   }
   if (loc_horarioAtual > loc_horarioFechamento) {
      return;
   }
   // ANTISPAM
   //---------
   MqlTick price_info;
   ZeroMemory(price_info);
   SymbolInfoTick(_Symbol, price_info);
   
   if(Posicoes_Abertas ==0 && Pause ==0 && Acima_Da_Linha_ADX ==1) {
      if(Setup_De_Compra ==1 && Acima_Da_Linha_Compra_Estocastico1 ==1) {
         if(Inverter_Estrategia == false) {
            trade.Buy(Lotes);
         } else {
            trade.Sell(Lotes);
         }
      }
         
      if(Setup_De_Venda ==1 && Abaixo_Da_Linha_Venda_Estocastico1 ==1) {
         if(Inverter_Estrategia == false) {
            trade.Sell(Lotes);
         } else {
            trade.Buy(Lotes);
         }
      } 
   }

   ///----------------------------------------------------------------------------------------------------------------------------------------------------------------------
   ///  L O G I C A   O P E R A C I O N A L  -  S A Í D A  /// -------------------------------------------------------------------------------------------------------------
   ///----------------------------------------------------------------------------------------------------------------------------------------------------------------------
   if(Tempo_Posicao_Aberta == Candles_Por_Operacao) {
      trade.PositionClose(GetTicketByMagicNumber(Magic));
      Tempo_Posicao_Aberta = 0;
      Pause = 1 + Coldown;
   }
}

// ENCERRAR POSIÇÕES
void encerrarPosicoes() {
   for (int i = 0; i < PositionsTotal(); i++) {
      trade.PositionClose(PositionGetSymbol(i));
   }
}

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void cancelarOrdens() {
   for (int i = 0; i < OrdersTotal(); i++) {
      ulong orderticket = OrderGetTicket(i);
      trade.OrderDelete(orderticket);
   }
}

long GetTicketByMagicNumber(int magicNumber)
{
    // Contar o número de posições abertas
    int totalPositions = PositionsTotal();
    
    // Percorrer todas as posições abertas
    for (int i = 0; i < totalPositions; i++)
    {
        // Obter o identificador (ticket) da posição
        ulong ticket = PositionGetTicket(i);
        
        // Verificar se conseguimos obter os detalhes da posição
        if (PositionSelectByTicket(ticket))
        {
            // Obter o magic number da posição
            int positionMagicNumber = PositionGetInteger(POSITION_MAGIC);
            
            // Comparar com o magic number especificado
            if (positionMagicNumber == magicNumber)
            {
                // Retornar o ticket se o magic number corresponder
                return ticket;
            }
        }
    }
    
    // Se não encontrar, retornar -1
    return -1;
}

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double OnTester() {
   //int handle = iCustom(_Symbol, PERIOD_CURRENT, "TradeBuddyTesterMT5");
   //ChartIndicatorAdd(0,0,handle);

// Verifica se o cálculo das estatísticas foi realizado com sucesso
   if(!m_stat.Calculate()) {
      return 0;
   }
// Verifica o número de trades
   double resultado = 0;
   
   if (m_stat.Trades() < mintrades && m_stat.Trades() > 100) {
      resultado = m_stat.Trades()*m_stat.ProfitFactor();
   } else if (m_stat.Trades() > mintrades){
      resultado = mintrades*m_stat.ProfitFactor();
   }
   
   resultado = MathPow(m_stat.LRCorrelation(), 15)*resultado;

   
   if(m_stat.Profit() > 0) {
      if(resultado > 0) {
         return resultado;
      } else {
         return resultado * -1;
      }
   } else {
      if(resultado < 0) {
         return resultado;
      } else {
         return resultado * -1;
      }
   }
}
