//+------------------------------------------------------------------+
//|                                                      ProjectName |
//|                                      Copyright 2020, CompanyName |
//|                                       http://www.companyname.net |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>
#include <CTradeStatistics.mqh>
CTrade trade;
CTradeStatistics m_stat;

// INPUTS
//-------


input group "Inverter"
input bool Inverter_Filtro_Estocastico1 = false;
input bool Inverter_Filtro_ADX1 = false;
input bool Inverter_Estrategia = false;

input group ""
input int Candles_Por_Operacao = 1;

input group "Filtro Estocastico"
input int Espacamento_Filtro_Estocastico1 = 10;
input int Periodo_Filtro_Estocastico1 = 14;
input int Media_Filtro_Estocastico1 = 14;

input group "Filtro Filtro_ADX1"
input int Linha_Filtro_ADX1 = 25;
input int Periodo_Filtro_ADX1 = 15;

input group ""
input int mintrades = 500;
input int Magic = 1;

// VARIÁVEIS
int hAbertura = 3;
int mAbertura = 0;
int hFechamento = 22;
int mFechamento = 0;
int Coldown = 0;
double Lotes = 1;
 
int Linha_De_Compra_Filtro_Estocastico1 = Espacamento_Filtro_Estocastico1;
int Linha_De_Venda_Filtro_Estocastico1 = 100+Espacamento_Filtro_Estocastico1*(-1);
int Acima_Da_Linha_Compra_Filtro_Estocastico1 = 0;
int Abaixo_Da_Linha_Venda_Filtro_Estocastico1 = 0;

int Acima_Da_Linha_Filtro_ADX1 = 25;
datetime lastTime = iTime(NULL, 0, 0);

bool Setup_De_Compra = false;
bool Setup_De_Venda = false;
int Pause = 0;
int Posicoes_Abertas = 0;
int Tempo_Posicao_Aberta = 0;

// HANDLES
//--------
double Handle_Filtro_Estocastico1;
double Handle_Filtro_ADX1;

// BUFFERS
//--------
double Filtro_Estocastico1[];
double Filtro_ADX1[];


MqlRates rates[];

// ANTISPAM
//---------
datetime candleNovo;
datetime candleAtual;

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit() {
   trade.SetExpertMagicNumber(Magic);
   // HANDLES
   //--------
   Handle_Filtro_Estocastico1 = iStochastic(NULL, PERIOD_CURRENT, Periodo_Filtro_Estocastico1, 1, Media_Filtro_Estocastico1, MODE_SMA, STO_CLOSECLOSE);
   Handle_Filtro_ADX1 = iADX(NULL, PERIOD_CURRENT, Periodo_Filtro_ADX1);
   return (INIT_SUCCEEDED);
}



//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick() {
   // ARRAY
   //------
   ArraySetAsSeries(Filtro_Estocastico1, true);
   ArraySetAsSeries(Filtro_ADX1, true);
   ArraySetAsSeries(rates, true);
   // COPYBUFFER
   //----------
   CopyBuffer(Handle_Filtro_Estocastico1, 0, 1, 3, Filtro_Estocastico1);
   CopyBuffer(Handle_Filtro_ADX1, 0, 1, 3, Filtro_ADX1);
   CopyRates(_Symbol, _Period, 0, 4, rates);

// VERIFICA SE ESTÁ COM UMA OPERAÇÃO ABERTA
//--------------------
   if (GetTicketByMagicNumber(Magic) != -1) {
      Posicoes_Abertas = 1;
   } else {
      Posicoes_Abertas = 0;
   }

///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
///  V E R I F I C A Ç Ã O   N A   A B E R T U R A   D O S   C A N D L E S  /// --------------------------------------------------------------------------------------------
///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   if(iTime(NULL, 0, 0) != lastTime) {
      // O tempo do último candle mudou, então um novo candle começou
      if(Pause > 0) {
         Pause = Pause - 1;
      }
      
      if (Posicoes_Abertas !=0) {
        Tempo_Posicao_Aberta = Tempo_Posicao_Aberta+1;
      }
      // Atualiza o tempo do último candle
      lastTime = iTime(NULL, 0, 0);
      

      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      ///  V E R I F I C A Ç Ã O   D O S   F I L T R O S  /// --------------------------------------------------------------------------------------------------------------------
      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      if(Filtro_Estocastico1[1] > Linha_De_Compra_Filtro_Estocastico1) {
         if(Inverter_Filtro_Estocastico1 == false) {
            Acima_Da_Linha_Compra_Filtro_Estocastico1 = 1;
         } else {
            Acima_Da_Linha_Compra_Filtro_Estocastico1 = 0;
         }
      } else {
         if(Inverter_Filtro_Estocastico1 == false) {
            Acima_Da_Linha_Compra_Filtro_Estocastico1 = 0;
         } else {
            Acima_Da_Linha_Compra_Filtro_Estocastico1 = 1;
         }
      }
      
      if(Filtro_Estocastico1[1] < Linha_De_Venda_Filtro_Estocastico1) {
         if(Inverter_Filtro_Estocastico1 == false) {
            Abaixo_Da_Linha_Venda_Filtro_Estocastico1 = 1;
         } else {
            Abaixo_Da_Linha_Venda_Filtro_Estocastico1 = 0;
         }
      } else {
         if(Inverter_Filtro_Estocastico1 == false) {
            Abaixo_Da_Linha_Venda_Filtro_Estocastico1 = 0;
         } else {
            Abaixo_Da_Linha_Venda_Filtro_Estocastico1 = 1;
         }
      }
      
      
      if(Filtro_ADX1[1] > Linha_Filtro_ADX1) {
         if(Inverter_Filtro_ADX1 == false) {
            Acima_Da_Linha_Filtro_ADX1 = 1;
         } else {
            Acima_Da_Linha_Filtro_ADX1 = 0;
         }
      } else {
         if(Inverter_Filtro_ADX1 == false) {
            Acima_Da_Linha_Filtro_ADX1 = 0;
         } else {
            Acima_Da_Linha_Filtro_ADX1 = 1;
         }
      }
      
      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      ///  V E R I F I C A Ç Ã O   D O   S E T U P  /// --------------------------------------------------------------------------------------------------------------------
      ///-------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
      if(rates[1].close > rates[2].close && rates[2].close > rates[3].close) {
         Setup_De_Compra = true;
      } else {
         Setup_De_Compra = false;
      }
      
      if(rates[1].close < rates[2].close && rates[2].close < rates[3].close) {
         Setup_De_Venda = true;
      } else {
         Setup_De_Venda = false;;
      }
      
      Print("posições abertas: ",Posicoes_Abertas);
      Print("tempo de posição aberta: ",Tempo_Posicao_Aberta);
      Print("Acima_Da_Linha_Compra_Filtro_Estocastico1: ",Acima_Da_Linha_Compra_Filtro_Estocastico1);
      Print("Abaixo_Da_Linha_Venda_Filtro_Estocastico1: ",Abaixo_Da_Linha_Venda_Filtro_Estocastico1);
   }

   // HORÁRIO OPERACIONAL
   //--------------------
   MqlDateTime dataInterna;
   TimeCurrent(dataInterna);
   double loc_horarioAtual = dataInterna.hour * 60 + dataInterna.min;
   double loc_horarioAbertura = hAbertura * 60 + mAbertura;
   double loc_horarioFechamento = hFechamento * 60 + mFechamento - 1;
   if (loc_horarioAtual > loc_horarioFechamento) {
      encerrarPosicoes();
      cancelarOrdens();
   }
   if (loc_horarioAtual < loc_horarioAbertura) {
      return;
   }
   if (loc_horarioAtual > loc_horarioFechamento) {
      return;
   }
   // ANTISPAM
   //---------
   MqlTick price_info;
   ZeroMemory(price_info);
   SymbolInfoTick(_Symbol, price_info);
   
   if(Posicoes_Abertas ==0 && Pause ==0 && Acima_Da_Linha_Filtro_ADX1 ==1) {
      if(Setup_De_Compra ==1 && Acima_Da_Linha_Compra_Filtro_Estocastico1 ==1) {
         if(Inverter_Estrategia == false) {
            trade.Buy(Lotes);
         } else {
            trade.Sell(Lotes);
         }
      }
         
      if(Setup_De_Venda ==1 && Abaixo_Da_Linha_Venda_Filtro_Estocastico1 ==1) {
         if(Inverter_Estrategia == false) {
            trade.Sell(Lotes);
         } else {
            trade.Buy(Lotes);
         }
      } 
   }

   ///----------------------------------------------------------------------------------------------------------------------------------------------------------------------
   ///  L O G I C A   O P E R A C I O N A L  -  S A Í D A  /// -------------------------------------------------------------------------------------------------------------
   ///----------------------------------------------------------------------------------------------------------------------------------------------------------------------
   if(Tempo_Posicao_Aberta == Candles_Por_Operacao) {
      trade.PositionClose(GetTicketByMagicNumber(Magic));
      Tempo_Posicao_Aberta = 0;
      Pause = 1 + Coldown;
   }
}

// ENCERRAR POSIÇÕES
void encerrarPosicoes() {
   for (int i = 0; i < PositionsTotal(); i++) {
      trade.PositionClose(PositionGetSymbol(i));
   }
}

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void cancelarOrdens() {
   for (int i = 0; i < OrdersTotal(); i++) {
      ulong orderticket = OrderGetTicket(i);
      trade.OrderDelete(orderticket);
   }
}

long GetTicketByMagicNumber(int magicNumber)
{
    // Contar o número de posições abertas
    int totalPositions = PositionsTotal();
    
    // Percorrer todas as posições abertas
    for (int i = 0; i < totalPositions; i++)
    {
        // Obter o identificador (ticket) da posição
        ulong ticket = PositionGetTicket(i);
        
        // Verificar se conseguimos obter os detalhes da posição
        if (PositionSelectByTicket(ticket))
        {
            // Obter o magic number da posição
            int positionMagicNumber = PositionGetInteger(POSITION_MAGIC);
            
            // Comparar com o magic number especificado
            if (positionMagicNumber == magicNumber)
            {
                // Retornar o ticket se o magic number corresponder
                return ticket;
            }
        }
    }
    
    // Se não encontrar, retornar -1
    return -1;
}

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double OnTester() {
   //int handle = iCustom(_Symbol, PERIOD_CURRENT, "TradeBuddyTesterMT5");
   //ChartIndicatorAdd(0,0,handle);

// Verifica se o cálculo das estatísticas foi realizado com sucesso
   if(!m_stat.Calculate()) {
      return 0;
   }
// Verifica o número de trades
   double resultado = MathPow(m_stat.LRCorrelation(), 15)*m_stat.ProfitFactor();
   
   if (m_stat.Trades() < mintrades) {
      resultado = resultado*m_stat.Trades();
   } else {
      resultado = resultado*mintrades;
   }
   
   if(m_stat.Profit() > 0) {
      if(resultado > 0) {
         return resultado;
      } else {
         return resultado * -1;
      }
   } else {
      if(resultado < 0) {
         return resultado;
      } else {
         return resultado * -1;
      }
   }
}
